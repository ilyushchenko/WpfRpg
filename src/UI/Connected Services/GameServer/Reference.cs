//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.GameServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServer.IGameChoiceService", CallbackContract=typeof(UI.GameServer.IGameChoiceServiceCallback))]
    public interface IGameChoiceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/LogIn", ReplyAction="http://tempuri.org/IGameChoiceService/LogInResponse")]
        UI.GameServer.LogInResponse LogIn(UI.GameServer.LogInRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/LogIn", ReplyAction="http://tempuri.org/IGameChoiceService/LogInResponse")]
        System.Threading.Tasks.Task<UI.GameServer.LogInResponse> LogInAsync(UI.GameServer.LogInRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/GetGames", ReplyAction="http://tempuri.org/IGameChoiceService/GetGamesResponse")]
        Core.Data.CGameInfo[] GetGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/GetGames", ReplyAction="http://tempuri.org/IGameChoiceService/GetGamesResponse")]
        System.Threading.Tasks.Task<Core.Data.CGameInfo[]> GetGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/CreateGame", ReplyAction="http://tempuri.org/IGameChoiceService/CreateGameResponse")]
        Core.Data.CGameInfo CreateGame(string name, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/CreateGame", ReplyAction="http://tempuri.org/IGameChoiceService/CreateGameResponse")]
        System.Threading.Tasks.Task<Core.Data.CGameInfo> CreateGameAsync(string name, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/TryConnect", ReplyAction="http://tempuri.org/IGameChoiceService/TryConnectResponse")]
        UI.GameServer.TryConnectResponse TryConnect(UI.GameServer.TryConnectRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameChoiceService/TryConnect", ReplyAction="http://tempuri.org/IGameChoiceService/TryConnectResponse")]
        System.Threading.Tasks.Task<UI.GameServer.TryConnectResponse> TryConnectAsync(UI.GameServer.TryConnectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/Ready")]
        void Ready(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/Ready")]
        System.Threading.Tasks.Task ReadyAsync(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/Disconnect")]
        void Disconnect(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChoiceServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/PlayerHasConnected")]
        void PlayerHasConnected(Core.Data.CPlayer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/PlayerHasDisconnected")]
        void PlayerHasDisconnected(Core.Data.CPlayer player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameChoiceService/GameHasStarted")]
        void GameHasStarted(string gameUri);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LogIn", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LogInRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Guid id;
        
        public LogInRequest() {
        }
        
        public LogInRequest(string login, System.Guid id) {
            this.login = login;
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LogInResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LogInResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool LogInResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Core.Data.CPlayer player;
        
        public LogInResponse() {
        }
        
        public LogInResponse(bool LogInResult, Core.Data.CPlayer player) {
            this.LogInResult = LogInResult;
            this.player = player;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TryConnect", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TryConnectRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Guid gameId;
        
        public TryConnectRequest() {
        }
        
        public TryConnectRequest(System.Guid gameId) {
            this.gameId = gameId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TryConnectResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class TryConnectResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool TryConnectResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Core.Data.CGameInfo gameInfo;
        
        public TryConnectResponse() {
        }
        
        public TryConnectResponse(bool TryConnectResult, Core.Data.CGameInfo gameInfo) {
            this.TryConnectResult = TryConnectResult;
            this.gameInfo = gameInfo;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChoiceServiceChannel : UI.GameServer.IGameChoiceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameChoiceServiceClient : System.ServiceModel.DuplexClientBase<UI.GameServer.IGameChoiceService>, UI.GameServer.IGameChoiceService {
        
        public GameChoiceServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameChoiceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameChoiceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameChoiceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameChoiceServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UI.GameServer.LogInResponse UI.GameServer.IGameChoiceService.LogIn(UI.GameServer.LogInRequest request) {
            return base.Channel.LogIn(request);
        }
        
        public bool LogIn(string login1, System.Guid id, out Core.Data.CPlayer player) {
            UI.GameServer.LogInRequest inValue = new UI.GameServer.LogInRequest();
            inValue.login = login1;
            inValue.id = id;
            UI.GameServer.LogInResponse retVal = ((UI.GameServer.IGameChoiceService)(this)).LogIn(inValue);
            player = retVal.player;
            return retVal.LogInResult;
        }
        
        public System.Threading.Tasks.Task<UI.GameServer.LogInResponse> LogInAsync(UI.GameServer.LogInRequest request) {
            return base.Channel.LogInAsync(request);
        }
        
        public Core.Data.CGameInfo[] GetGames() {
            return base.Channel.GetGames();
        }
        
        public System.Threading.Tasks.Task<Core.Data.CGameInfo[]> GetGamesAsync() {
            return base.Channel.GetGamesAsync();
        }
        
        public Core.Data.CGameInfo CreateGame(string name, int maxPlayers) {
            return base.Channel.CreateGame(name, maxPlayers);
        }
        
        public System.Threading.Tasks.Task<Core.Data.CGameInfo> CreateGameAsync(string name, int maxPlayers) {
            return base.Channel.CreateGameAsync(name, maxPlayers);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UI.GameServer.TryConnectResponse UI.GameServer.IGameChoiceService.TryConnect(UI.GameServer.TryConnectRequest request) {
            return base.Channel.TryConnect(request);
        }
        
        public bool TryConnect(System.Guid gameId, out Core.Data.CGameInfo gameInfo) {
            UI.GameServer.TryConnectRequest inValue = new UI.GameServer.TryConnectRequest();
            inValue.gameId = gameId;
            UI.GameServer.TryConnectResponse retVal = ((UI.GameServer.IGameChoiceService)(this)).TryConnect(inValue);
            gameInfo = retVal.gameInfo;
            return retVal.TryConnectResult;
        }
        
        public System.Threading.Tasks.Task<UI.GameServer.TryConnectResponse> TryConnectAsync(UI.GameServer.TryConnectRequest request) {
            return base.Channel.TryConnectAsync(request);
        }
        
        public void Ready(System.Guid gameId) {
            base.Channel.Ready(gameId);
        }
        
        public System.Threading.Tasks.Task ReadyAsync(System.Guid gameId) {
            return base.Channel.ReadyAsync(gameId);
        }
        
        public void Disconnect(System.Guid gameId) {
            base.Channel.Disconnect(gameId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid gameId) {
            return base.Channel.DisconnectAsync(gameId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServer.IMapService")]
    public interface IMapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMapService/GetMaps", ReplyAction="http://tempuri.org/IMapService/GetMapsResponse")]
        Core.Data.CMapInfo[] GetMaps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMapService/GetMaps", ReplyAction="http://tempuri.org/IMapService/GetMapsResponse")]
        System.Threading.Tasks.Task<Core.Data.CMapInfo[]> GetMapsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMapServiceChannel : UI.GameServer.IMapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MapServiceClient : System.ServiceModel.ClientBase<UI.GameServer.IMapService>, UI.GameServer.IMapService {
        
        public MapServiceClient() {
        }
        
        public MapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Core.Data.CMapInfo[] GetMaps() {
            return base.Channel.GetMaps();
        }
        
        public System.Threading.Tasks.Task<Core.Data.CMapInfo[]> GetMapsAsync() {
            return base.Channel.GetMapsAsync();
        }
    }
}
